/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthImport } from './routes/auth'
import { Route as IndexImport } from './routes/index'
import { Route as TestIndexImport } from './routes/test/index'
import { Route as PostIndexImport } from './routes/post/index'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as AdminCategoriesImport } from './routes/admin/categories'
import { Route as TestidIndexImport } from './routes/test/$_id/index'
import { Route as PostidIndexImport } from './routes/post/$_id/index'
import { Route as AdminTestIndexImport } from './routes/admin/test/index'
import { Route as AdminPostIndexImport } from './routes/admin/post/index'
import { Route as AdminTestidIndexImport } from './routes/admin/test/$_id/index'
import { Route as AdminPostidIndexImport } from './routes/admin/post/$_id/index'

// Create/Update Routes

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TestIndexRoute = TestIndexImport.update({
  id: '/test/',
  path: '/test/',
  getParentRoute: () => rootRoute,
} as any)

const PostIndexRoute = PostIndexImport.update({
  id: '/post/',
  path: '/post/',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRoute,
} as any)

const AdminCategoriesRoute = AdminCategoriesImport.update({
  id: '/admin/categories',
  path: '/admin/categories',
  getParentRoute: () => rootRoute,
} as any)

const TestidIndexRoute = TestidIndexImport.update({
  id: '/test/$_id/',
  path: '/test/$_id/',
  getParentRoute: () => rootRoute,
} as any)

const PostidIndexRoute = PostidIndexImport.update({
  id: '/post/$_id/',
  path: '/post/$_id/',
  getParentRoute: () => rootRoute,
} as any)

const AdminTestIndexRoute = AdminTestIndexImport.update({
  id: '/admin/test/',
  path: '/admin/test/',
  getParentRoute: () => rootRoute,
} as any)

const AdminPostIndexRoute = AdminPostIndexImport.update({
  id: '/admin/post/',
  path: '/admin/post/',
  getParentRoute: () => rootRoute,
} as any)

const AdminTestidIndexRoute = AdminTestidIndexImport.update({
  id: '/admin/test/$_id/',
  path: '/admin/test/$_id/',
  getParentRoute: () => rootRoute,
} as any)

const AdminPostidIndexRoute = AdminPostidIndexImport.update({
  id: '/admin/post/$_id/',
  path: '/admin/post/$_id/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/admin/categories': {
      id: '/admin/categories'
      path: '/admin/categories'
      fullPath: '/admin/categories'
      preLoaderRoute: typeof AdminCategoriesImport
      parentRoute: typeof rootRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof rootRoute
    }
    '/post/': {
      id: '/post/'
      path: '/post'
      fullPath: '/post'
      preLoaderRoute: typeof PostIndexImport
      parentRoute: typeof rootRoute
    }
    '/test/': {
      id: '/test/'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/post/': {
      id: '/admin/post/'
      path: '/admin/post'
      fullPath: '/admin/post'
      preLoaderRoute: typeof AdminPostIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/test/': {
      id: '/admin/test/'
      path: '/admin/test'
      fullPath: '/admin/test'
      preLoaderRoute: typeof AdminTestIndexImport
      parentRoute: typeof rootRoute
    }
    '/post/$_id/': {
      id: '/post/$_id/'
      path: '/post/$_id'
      fullPath: '/post/$_id'
      preLoaderRoute: typeof PostidIndexImport
      parentRoute: typeof rootRoute
    }
    '/test/$_id/': {
      id: '/test/$_id/'
      path: '/test/$_id'
      fullPath: '/test/$_id'
      preLoaderRoute: typeof TestidIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/post/$_id/': {
      id: '/admin/post/$_id/'
      path: '/admin/post/$_id'
      fullPath: '/admin/post/$_id'
      preLoaderRoute: typeof AdminPostidIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/test/$_id/': {
      id: '/admin/test/$_id/'
      path: '/admin/test/$_id'
      fullPath: '/admin/test/$_id'
      preLoaderRoute: typeof AdminTestidIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/admin/categories': typeof AdminCategoriesRoute
  '/admin': typeof AdminIndexRoute
  '/post': typeof PostIndexRoute
  '/test': typeof TestIndexRoute
  '/admin/post': typeof AdminPostIndexRoute
  '/admin/test': typeof AdminTestIndexRoute
  '/post/$_id': typeof PostidIndexRoute
  '/test/$_id': typeof TestidIndexRoute
  '/admin/post/$_id': typeof AdminPostidIndexRoute
  '/admin/test/$_id': typeof AdminTestidIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/admin/categories': typeof AdminCategoriesRoute
  '/admin': typeof AdminIndexRoute
  '/post': typeof PostIndexRoute
  '/test': typeof TestIndexRoute
  '/admin/post': typeof AdminPostIndexRoute
  '/admin/test': typeof AdminTestIndexRoute
  '/post/$_id': typeof PostidIndexRoute
  '/test/$_id': typeof TestidIndexRoute
  '/admin/post/$_id': typeof AdminPostidIndexRoute
  '/admin/test/$_id': typeof AdminTestidIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/admin/categories': typeof AdminCategoriesRoute
  '/admin/': typeof AdminIndexRoute
  '/post/': typeof PostIndexRoute
  '/test/': typeof TestIndexRoute
  '/admin/post/': typeof AdminPostIndexRoute
  '/admin/test/': typeof AdminTestIndexRoute
  '/post/$_id/': typeof PostidIndexRoute
  '/test/$_id/': typeof TestidIndexRoute
  '/admin/post/$_id/': typeof AdminPostidIndexRoute
  '/admin/test/$_id/': typeof AdminTestidIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/admin/categories'
    | '/admin'
    | '/post'
    | '/test'
    | '/admin/post'
    | '/admin/test'
    | '/post/$_id'
    | '/test/$_id'
    | '/admin/post/$_id'
    | '/admin/test/$_id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/admin/categories'
    | '/admin'
    | '/post'
    | '/test'
    | '/admin/post'
    | '/admin/test'
    | '/post/$_id'
    | '/test/$_id'
    | '/admin/post/$_id'
    | '/admin/test/$_id'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/admin/categories'
    | '/admin/'
    | '/post/'
    | '/test/'
    | '/admin/post/'
    | '/admin/test/'
    | '/post/$_id/'
    | '/test/$_id/'
    | '/admin/post/$_id/'
    | '/admin/test/$_id/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRoute
  AdminCategoriesRoute: typeof AdminCategoriesRoute
  AdminIndexRoute: typeof AdminIndexRoute
  PostIndexRoute: typeof PostIndexRoute
  TestIndexRoute: typeof TestIndexRoute
  AdminPostIndexRoute: typeof AdminPostIndexRoute
  AdminTestIndexRoute: typeof AdminTestIndexRoute
  PostidIndexRoute: typeof PostidIndexRoute
  TestidIndexRoute: typeof TestidIndexRoute
  AdminPostidIndexRoute: typeof AdminPostidIndexRoute
  AdminTestidIndexRoute: typeof AdminTestidIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRoute,
  AdminCategoriesRoute: AdminCategoriesRoute,
  AdminIndexRoute: AdminIndexRoute,
  PostIndexRoute: PostIndexRoute,
  TestIndexRoute: TestIndexRoute,
  AdminPostIndexRoute: AdminPostIndexRoute,
  AdminTestIndexRoute: AdminTestIndexRoute,
  PostidIndexRoute: PostidIndexRoute,
  TestidIndexRoute: TestidIndexRoute,
  AdminPostidIndexRoute: AdminPostidIndexRoute,
  AdminTestidIndexRoute: AdminTestidIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth",
        "/admin/categories",
        "/admin/",
        "/post/",
        "/test/",
        "/admin/post/",
        "/admin/test/",
        "/post/$_id/",
        "/test/$_id/",
        "/admin/post/$_id/",
        "/admin/test/$_id/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth": {
      "filePath": "auth.tsx"
    },
    "/admin/categories": {
      "filePath": "admin/categories.tsx"
    },
    "/admin/": {
      "filePath": "admin/index.tsx"
    },
    "/post/": {
      "filePath": "post/index.tsx"
    },
    "/test/": {
      "filePath": "test/index.tsx"
    },
    "/admin/post/": {
      "filePath": "admin/post/index.tsx"
    },
    "/admin/test/": {
      "filePath": "admin/test/index.tsx"
    },
    "/post/$_id/": {
      "filePath": "post/$_id/index.tsx"
    },
    "/test/$_id/": {
      "filePath": "test/$_id/index.tsx"
    },
    "/admin/post/$_id/": {
      "filePath": "admin/post/$_id/index.tsx"
    },
    "/admin/test/$_id/": {
      "filePath": "admin/test/$_id/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
